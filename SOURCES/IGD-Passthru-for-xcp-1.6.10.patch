diff --git a/hw/pass-through.c b/hw/pass-through.c
index 9c5620d..4e0df8d 100644
--- a/hw/pass-through.c
+++ b/hw/pass-through.c
@@ -2055,33 +2055,22 @@ static void pci_access_init(void)
     dpci_infos.pci_access = pci_access;
 }
 
-u32 pt_pci_host_read(int bus, int dev, int fn, u32 addr, int len)
+struct pci_dev *pt_pci_get_dev(int bus, int dev, int fn)
 {
+        pci_access_init();
+            return pci_get_dev(dpci_infos.pci_access, 0, bus, dev, fn);
+}
 
-    struct pci_dev *pci_dev;
-    u32 val = -1;
-
-    pci_access_init();
-    pci_dev = pci_get_dev(dpci_infos.pci_access, 0, bus, dev, fn);
-    if ( !pci_dev )
-        return 0;
-
+u32 pt_pci_host_read(struct pci_dev *pci_dev, u32 addr, int len)
+{
+    u32 val = 0;
     pci_read_block(pci_dev, addr, (u8 *) &val, len);
     return val;
 }
 
-int pt_pci_host_write(int bus, int dev, int fn, u32 addr, u32 val, int len)
+int pt_pci_host_write(struct pci_dev *pci_dev, u32 addr, u32 val, int len)
 {
-    struct pci_dev *pci_dev;
-    int ret = 0;
-
-    pci_access_init();
-    pci_dev = pci_get_dev(dpci_infos.pci_access, 0, bus, dev, fn);
-    if ( !pci_dev )
-        return 0;
-
-    ret = pci_write_block(pci_dev, addr, (u8 *) &val, len);
-    return ret;
+    return pci_write_block(pci_dev, addr, (u8 *) &val, len);
 }
 
 /* parse BAR */
diff --git a/hw/pass-through.h b/hw/pass-through.h
index dd218f7..c9f4e66 100644
--- a/hw/pass-through.h
+++ b/hw/pass-through.h
@@ -29,6 +29,9 @@
 /* Log acesss */
 #define PT_LOGGING_ENABLED
 
+/* Print errors even if logging is disabled */
+#define PT_ERR(_f, _a...)   fprintf(logfile, "%s: " _f, __func__, ##_a)
+
 #ifdef PT_LOGGING_ENABLED
 #define PT_LOG(_f, _a...)   fprintf(logfile, "%s: " _f, __func__, ##_a)
 #else
@@ -406,8 +409,9 @@ static inline pciaddr_t pt_pci_base_addr(pciaddr_t base)
 }
 
 uint8_t pci_intx(struct pt_dev *ptdev);
-u32 pt_pci_host_read(int bus, int dev, int fn, u32 addr, int len);
-int pt_pci_host_write(int bus, int dev, int fn, u32 addr, u32 val, int len);
+struct pci_dev *pt_pci_get_dev(int bus, int dev, int func);
+u32 pt_pci_host_read(struct pci_dev *pt_pci_get_dev, u32 addr, int len);
+int pt_pci_host_write(struct pci_dev *pt_pci_get_dev, u32 addr, u32 val, int len);
 void intel_pch_init(PCIBus *bus);
 int register_vga_regions(struct pt_dev *real_device);
 int unregister_vga_regions(struct pt_dev *real_device);
diff --git a/hw/pci.c b/hw/pci.c
index fee3596..c21b791 100644
--- a/hw/pci.c
+++ b/hw/pci.c
@@ -910,10 +910,6 @@ int pci_unplug_nic(int devfn)
     return nd->vlan->id;
 }
 
-typedef struct {
-    PCIDevice dev;
-    PCIBus *bus;
-} PCIBridge;
 
 void pci_bridge_write_config(PCIDevice *d,
                              uint32_t address, uint32_t val, int len)
diff --git a/hw/pci.h b/hw/pci.h
index 3e0b7e5..34ad19f 100644
--- a/hw/pci.h
+++ b/hw/pci.h
@@ -241,6 +241,13 @@ struct PCIDevice {
     int irq_state[4];
 };
 
+
+typedef struct {
+    PCIDevice dev;
+    PCIBus *bus;
+} PCIBridge;
+
+
 extern char direct_pci_str[];
 extern int direct_pci_msitranslate;
 extern int direct_pci_power_mgmt;
diff --git a/hw/pt-graphics.c b/hw/pt-graphics.c
index e3fdf8e..84a1fee 100644
--- a/hw/pt-graphics.c
+++ b/hw/pt-graphics.c
@@ -4,6 +4,7 @@
 
 #include "pass-through.h"
 #include "pci/header.h"
+#include "pci.h"
 #include "pci/pci.h"
 
 #include <unistd.h>
@@ -23,69 +24,172 @@ void intel_pch_init(PCIBus *bus)
 {
     uint16_t vid, did;
     uint8_t  rid;
+    struct pci_dev *pci_dev_1f;
 
     if ( !gfx_passthru )
         return;
 
-    vid = pt_pci_host_read(0, 0x1f, 0, 0, 2);
-    did = pt_pci_host_read(0, 0x1f, 0, 2, 2);
-    rid = pt_pci_host_read(0, 0x1f, 0, 8, 1);
+    if ( !(pci_dev_1f=pt_pci_get_dev(0, 0x1f, 0)) )
+    {
+        PT_ERR("Error: Can't get pci_dev_host_bridge\n");
+        abort();
+    }
 
-    if ( vid == 0x8086 ) 
-        pci_bridge_init(bus, PCI_DEVFN(0x1f, 0), vid, did, rid,
-                        pch_map_irq, "intel_bridge_1f");
+    vid = pt_pci_host_read(pci_dev_1f, 0, 2);
+    did = pt_pci_host_read(pci_dev_1f, 2, 2);
+    rid = pt_pci_host_read(pci_dev_1f, 8, 1);
+
+    if (vid == PCI_VENDOR_ID_INTEL) {
+        PCIBridge *s = (PCIBridge *)pci_register_device(bus, "intel_bridge_1f",
+                sizeof(PCIBridge), PCI_DEVFN(0x1f, 0), NULL, pci_bridge_write_config);
+
+        pci_config_set_vendor_id(s->dev.config, vid);
+        pci_config_set_device_id(s->dev.config, did);
+
+        s->dev.config[PCI_COMMAND] = 0x06; // command = bus master, pci mem
+        s->dev.config[PCI_COMMAND + 1] = 0x00;
+        s->dev.config[PCI_STATUS] = 0xa0; // status = fast back-to-back, 66MHz, no error
+        s->dev.config[PCI_STATUS + 1] = 0x00; // status = fast devsel
+        s->dev.config[PCI_REVISION] = rid;
+        s->dev.config[PCI_CLASS_PROG] = 0x00; // programming i/f
+        pci_config_set_class(s->dev.config, PCI_CLASS_BRIDGE_ISA);
+        s->dev.config[PCI_LATENCY_TIMER] = 0x10;
+        s->dev.config[PCI_HEADER_TYPE] = 0x80;
+        s->dev.config[PCI_SEC_STATUS] = 0xa0;
+
+        s->bus = pci_register_secondary_bus(&s->dev, pch_map_irq);
+    }
 }
 
 void igd_pci_write(PCIDevice *pci_dev, uint32_t config_addr, uint32_t val, int len)
 {
+    struct pci_dev *pci_dev_host_bridge;
     assert(pci_dev->devfn == 0x00);
+    
     if ( !igd_passthru ) {
-        pci_default_write_config(pci_dev, config_addr, val, len);
-        return;
+        goto write_default;
     }
 
     switch (config_addr)
     {
         case 0x58:        // PAVPC Offset
-            pt_pci_host_write(0, 0, 0, config_addr, val, len);
-            PT_LOG("pci_config_write: %x:%x.%x: addr=%x len=%x val=%x\n",
-                   pci_bus_num(pci_dev->bus), PCI_SLOT(pci_dev->devfn),
-                   PCI_FUNC(pci_dev->devfn), config_addr, len, val);
             break;
         default:
-            pci_default_write_config(pci_dev, config_addr, val, len);
+            goto write_default;
+    }
+    
+    /* Host write */
+    if ( !(pci_dev_host_bridge = pt_pci_get_dev(0, 0, 0)) )
+    {
+        PT_ERR("Error: Can't get pci_dev_host_bridge\n");
+        abort();
+    }
+    pt_pci_host_write(pci_dev_host_bridge, config_addr, val, len);
+    PT_LOG("pci_config_write: %x:%x.%x: addr=%x len=%x val=%x\n",
+           pci_bus_num(pci_dev->bus), PCI_SLOT(pci_dev->devfn),
+           PCI_FUNC(pci_dev->devfn), config_addr, len, val);
+
+write_default:
+    pci_default_write_config(pci_dev, config_addr, val, len);
+    return;
+}
+
+#define PCI_INTEL_VENDOR_CAP            0x34
+#define PCI_INTEL_VENDOR_CAP_TYPE       0x09
+/*
+ * This function returns 0 is the value hasn't been
+ * updated. That mean the offset doesn't anything to
+ * do with the vendor capability.
+ */
+static uint32_t igd_pci_read_vendor_cap(PCIDevice *pci_dev, uint32_t config_addr, int len,
+                                        uint32_t *val)
+{
+    struct pci_dev *pci_dev_host_bridge = pt_pci_get_dev(0, 0, 0);
+    uint32_t vendor_cap = 0;
+    uint32_t cap_type = 0;
+    uint32_t cap_size = 0;
+
+    vendor_cap = pt_pci_host_read(pci_dev_host_bridge, PCI_INTEL_VENDOR_CAP, 1);
+    if (!vendor_cap)
+        return 0;
+
+    cap_type = pt_pci_host_read(pci_dev_host_bridge, vendor_cap, 1);
+    if (cap_type != PCI_INTEL_VENDOR_CAP_TYPE)
+        return 0;
+
+    if (config_addr == PCI_INTEL_VENDOR_CAP)
+    {
+        *val = vendor_cap;
+        return 1;
+    }
+
+    /* Remove the next capability link */
+    if (config_addr == vendor_cap + 1)
+    {
+        *val = 0;
+        return 1;
     }
+
+    cap_size = pt_pci_host_read(pci_dev_host_bridge, vendor_cap + 2, 1);
+    if (config_addr >= vendor_cap &&
+            config_addr + len <= vendor_cap + cap_size)
+    {
+        *val = pt_pci_host_read(pci_dev_host_bridge, config_addr, len);
+        return 1;
+    }
+
+    return 0;
 }
 
+
 uint32_t igd_pci_read(PCIDevice *pci_dev, uint32_t config_addr, int len)
 {
+    struct pci_dev *pci_dev_host_bridge;
     uint32_t val;
 
     assert(pci_dev->devfn == 0x00);
-    if ( !igd_passthru ) {
-        return pci_default_read_config(pci_dev, config_addr, len);
-    }
+    if ( !igd_passthru )
+        goto read_default;
 
     switch (config_addr)
     {
         case 0x00:        /* vendor id */
         case 0x02:        /* device id */
+        case 0x04:        /* command */
+        case 0x06:        /* status, needed for the cap list bit*/
+        case 0x08:        /* revision id */
+        case 0x2c:        /* sybsystem vendor id */
+        case 0x2e:        /* sybsystem id */
+        case 0x50:        /* SNB: processor graphics control register */
         case 0x52:        /* processor graphics control register */
         case 0xa0:        /* top of memory */
         case 0xb0:        /* ILK: BSM: should read from dev 2 offset 0x5c */
         case 0x58:        /* SNB: PAVPC Offset */
         case 0xa4:        /* SNB: graphics base of stolen memory */
         case 0xa8:        /* SNB: base of GTT stolen memory */
-            val = pt_pci_host_read(0, PCI_SLOT(pci_dev->devfn),
-                                   0, config_addr, len);
-            PT_LOG("pci_config_read: %x:%x.%x: addr=%x len=%x val=%x\n",
-                   pci_bus_num(pci_dev->bus), PCI_SLOT(pci_dev->devfn),
-                   PCI_FUNC(pci_dev->devfn), config_addr, len, val);
             break;
         default:
-            val = pci_default_read_config(pci_dev, config_addr, len);
+            if ( igd_pci_read_vendor_cap(pci_dev, config_addr, len, &val) )
+                break;
+            goto read_default;
     }
+
+    /* Host read */
+    if ( !(pci_dev_host_bridge = pt_pci_get_dev(0, 0, 0)) )
+    {
+        PT_ERR("Error: Can't get pci_dev_host_bridge\n");
+        abort();
+    }
+
+    val = pt_pci_host_read(pci_dev_host_bridge, config_addr, len);
+    PT_LOG("pci_config_read: %x:%x.%x: addr=%x len=%x val=%x\n",
+           pci_bus_num(pci_dev->bus), PCI_SLOT(pci_dev->devfn),
+           PCI_FUNC(pci_dev->devfn), config_addr, len, val);
+
     return val;
+
+read_default:
+    return pci_default_read_config(pci_dev, config_addr, len);
 }
 
 /*
@@ -93,6 +197,7 @@ uint32_t igd_pci_read(PCIDevice *pci_dev, uint32_t config_addr, int len)
  */
 int register_vga_regions(struct pt_dev *real_device)
 {
+    struct pci_dev *host_pci_dev;
     u32 vendor_id, igd_opregion;
     int ret = 0;
 
@@ -111,9 +216,17 @@ int register_vga_regions(struct pt_dev *real_device)
             0x20,
             DPCI_ADD_MAPPING);
 
+    /* Host read */
+    if ( !(host_pci_dev = pt_pci_get_dev(0, 2, 0)) )
+    {
+        PT_ERR("Error: Can't get pci_dev_host_pci_dev \n");
+        abort();
+    }
+
     /* 1:1 map ASL Storage register value */
-    vendor_id = pt_pci_host_read(0, 2, 0, 0, 2);
-    igd_opregion = pt_pci_host_read(0, 2, 0, 0xfc, 4);
+    vendor_id = pt_pci_host_read(host_pci_dev, 0, 2);
+    igd_opregion = pt_pci_host_read(host_pci_dev,  0xfc, 2);
+
     if ( (vendor_id == 0x8086) && igd_opregion )
     {
         ret |= xc_domain_memory_mapping(xc_handle, domid,
@@ -135,6 +248,7 @@ int register_vga_regions(struct pt_dev *real_device)
  */
 int unregister_vga_regions(struct pt_dev *real_device)
 {
+    struct pci_dev *host_pci_dev;
     u32 vendor_id, igd_opregion;
     int ret = 0;
 
@@ -153,8 +267,17 @@ int unregister_vga_regions(struct pt_dev *real_device)
             20,
             DPCI_REMOVE_MAPPING);
 
-    vendor_id = pt_pci_host_read(0, 2, 0, 0, 2);
-    igd_opregion = pt_pci_host_read(0, 2, 0, 0xfc, 4);
+    /* Host read */
+    if ( !(host_pci_dev = pt_pci_get_dev(0, 2, 0)) )
+    {
+        PT_ERR("Error: Can't get pci_dev_host_pci_dev \n");
+        abort();
+    }
+
+     /* 1:1 map ASL Storage register value */
+   vendor_id = pt_pci_host_read(host_pci_dev, 0, 2);
+    igd_opregion = pt_pci_host_read(host_pci_dev,  0xfc, 2);
+
     if ( (vendor_id == 0x8086) && igd_opregion )
     {
         ret |= xc_domain_memory_mapping(xc_handle, domid,
diff --git a/hw/pt-msi.c b/hw/pt-msi.c
index 71fa6f0..b8337b3 100644
--- a/hw/pt-msi.c
+++ b/hw/pt-msi.c
@@ -213,7 +213,7 @@ void pt_msi_disable(struct pt_dev *dev)
 
 out:
     /* clear msi info */
-    dev->msi->flags = 0;
+    dev->msi->flags &= ~(MSI_FLAG_UNINIT | PT_MSI_MAPPED | PCI_MSI_FLAGS_ENABLE);
     dev->msi->pirq = -1;
     dev->msi_trans_en = 0;
 }
